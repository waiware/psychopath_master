// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder", "relationJoins", "metrics", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider                         = "zod-prisma-types"
  output                           = "../../../packages/types/src/domains"
  useMultipleFiles                 = true // default is false
  writeBarrelFiles                 = true // default is true
  createInputTypes                 = false // default is true
  createModelTypes                 = true // default is true
  addInputTypeValidation           = true // default is true
  addIncludeType                   = true // default is true
  addSelectType                    = true // default is true
  validateWhereUniqueInput         = true // default is true
  createOptionalDefaultValuesTypes = false // default is false
  createRelationValuesTypes        = false // default is false
  createPartialTypes               = false // default is false
  useDefaultValidators             = true // default is true
  coerceDate                       = true // default is true
  writeNullishInModelTypes         = false // default is false
}

model Question {
  id     String @id @default(uuid())
  title  String
  body   String
  answer String @default("") // 空文字で初期化

  posts   Post[]
  answers Answer[]

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz()

  @@map("questions")
}

model Post {
  id   String @id @default(uuid())
  body String

  questionId String   @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])

  userId String @map("user_id") // ログインなしでも扱えるためlocalStorageに保存されたidを使う
  user   User   @relation(fields: [userId], references: [id])

  postType PostType @map("post_type")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz()

  @@map("posts")
}

enum PostType {
  USER
  BOT

  @@map("post_types")
}

model Answer {
  id   String @id @default(uuid())
  body String

  questionId String   @map("question_id")
  question   Question @relation(fields: [questionId], references: [id])

  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])

  isCorrect Boolean @default(false) @map("is_correct") // 正解かどうか
  isJudging Boolean @default(true) @map("is_judging") // 正誤判定中かどうか

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz()

  @@map("answers")
}

model User {
  id   String @id @default(uuid())
  name String

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz()

  post    Post[]
  answers Answer[]

  @@map("users")
}
